#!/usr/bin/env python3
# Copyright European Organization for Nuclear Research (CERN) 2013
#
# Licensed under the Apache License, Version 2.0 (the "License");
# You may not use this file except in compliance with the License.
# You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0
#
# Authors:
# - Thomas Beerman, <thomas.beermann@cern.ch>, 2020

'''
Probe to check faulty kubernetes pods.
'''
import sys
from kubernetes import client, config

from rucio.common.config import config_get

OK, WARNING, CRITICAL, UNKNOWN = 0, 1, 2, 3

EXPECTED = ['Running', 'Succeeded']

CLUSTERS = config_get("nagios", "k8s_clusters").split(",")
CONFIG_PATH = config_get("nagios", "k8s_config_path")


def check_pods(cluster, pods):
    ret = "Cluster: %s\n" % cluster
    allok = True
    for pod in pods:
        phase = pod.status.phase
        name = pod.metadata.name
        namespace = pod.metadata.namespace
        reason = pod.status.reason
        node = pod.spec.node_name
        if phase not in EXPECTED:
            allok = False
            ret += ("%s:%s: %s: %s (%s)\n" % (namespace, name, phase, reason, node))

    if not allok:
        return ret
    return False


if __name__ == "__main__":
    allok = True
    output = []
    for cluster in CLUSTERS:
        config.load_kube_config("%s/%s" % (CONFIG_PATH, cluster))
        v1 = client.CoreV1Api()
        pods = v1.list_pod_for_all_namespaces(watch=False)

        ret = check_pods(cluster, pods.items)

        if ret:
            allok = False
            output.append(ret)

    if not allok:
        for line in output:
            print(line)
        sys.exit(WARNING)

    sys.exit(OK)
