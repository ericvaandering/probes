#!/usr/bin/env python
# Copyright European Organization for Nuclear Research (CERN) 2013
#
# Licensed under the Apache License, Version 2.0 (the "License");
# You may not use this file except in compliance with the License.
# You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0
#
# Authors:
# - Donata Mielaikaite, <donata.mielaikaite@cern.ch>, 2020

"""
Probe to check the backlog of missing data at rse
"""

import sys
import traceback

from rucio.core import monitor
from rucio.db.sqla.session import BASE, get_session

# Exit statuses
OK, WARNING, CRITICAL, UNKNOWN = 0, 1, 2, 3

if BASE.metadata.schema:
    schema = BASE.metadata.schema + '.'
else:
    schema = ''

if __name__ == "__main__":
    try:
        session = get_session()
        sql = """SELECT /*+ index_ffs(REQUESTS REQUESTS_TYP_STA_CRE_IDX) */ {schema}rses.rse rse, sum(bytes), rse_type \ 
               from {schema}requests \ 
               join {schema}rses on requests.dest_rse_id = rses.id \ 
               join {schema}rules on requests.rule_id = rules.id \ 
               where requests.request_type='T' and rules.state!='O' \ 
               group by rse,rse_type""".format(schema=schema)
        result = session.execute(sql).fetchall()
        for rse, bytes, rse_type in result:
            monitor.record_gauge(stat='requests.missing_data.%s.%s' % (rse_type, rse), value=bytes)
 
        sql = """select /*+ index_ffs(REQUESTS REQUESTS_TYP_STA_CRE_IDX) */ {schema}rses.rse rse, sum(bytes), rse_type \
               from {schema}requests \
               join {schema}rses on requests.dest_rse_id = rses.id \
               join {schema}rules on requests.rule_id = rules.id \ 
               where request_type='T' and rules.state='R' \
               group by rse,rse_type""".format(schema=schema)
        result = session.execute(sql).fetchall()
        for rse, bytes, rse_type in result:
            monitor.record_gauge(stat='requests.replicating_data.%s.%s' % (rse_type, rse), value=bytes)
    except:
        print traceback.format_exc()
        sys.exit(UNKNOWN)
    sys.exit(OK)
