#!/usr/bin/env python
# Copyright European Organization for Nuclear Research (CERN) 2013
#
# Licensed under the Apache License, Version 2.0 (the "License");
# You may not use this file except in compliance with the License.
# You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0
#
# Authors:
# - Wen Guan, <wguan@cern.ch>, 2014
# - Donata Mielaikaite, <donata.mielaikaite@cern.ch>, 2020
# - Eric Vaandering, <ewv@fnal.gov>, 2020

"""
Probe to check rules.
"""
from __future__ import print_function

import datetime
import sys
import time
import traceback

from rucio.core import monitor
from rucio.db.sqla import models
from rucio.db.sqla.constants import (RuleState)
from rucio.db.sqla.session import get_session
from sqlalchemy import func

# Exit statuses
OK, WARNING, CRITICAL, UNKNOWN = 0, 1, 2, 3

if __name__ == "__main__":

    try:
        session = get_session()
        utctime = datetime.datetime.utcnow()
        utctimeInt = int(time.mktime(utctime.timetuple()))
        timeEnd = utctimeInt
        timezoneoffset = int((datetime.datetime.now() - datetime.datetime.utcnow()).seconds)

        # check rules

        state_map = {'REPLICATING': 'rules_replicating',
                     'OK': 'rules_ok',
                     'STUCK': 'rules_stuck',
                     'SUSPENDED': 'rules_suspend',
                     'WAITING_APPROVAL': 'rules_waiting_approval', }

        result = (session.query(models.ReplicationRule.state, func.count(models.ReplicationRule.state))
                         .group_by(models.ReplicationRule.state)
                         .with_hint(models.ReplicationRule, 'INDEX_FFS(rules RULES_PK)', 'oracle').all())

        for state, num in result:
            gauge_state = state_map.get(repr(state), 'rules_' + repr(state).lower())
            print('rules.count.%s %s' % (gauge_state, num))
            monitor.record_gauge(stat='rules.count.%s' % (gauge_state), value=num)

        ages = {
            'created_24hours_ago': datetime.timedelta(hours=24),
            'created_1week_ago': datetime.timedelta(hours=168),
            'created_3weeks_ago': datetime.timedelta(hours=672),
        }

        query = (session.query(func.sum(models.ReplicationRule.locks_stuck_cnt))
                        .filter(models.ReplicationRule.state == RuleState.STUCK))
        result = query.one()[0] or 0
        print('rules.no_of_files.total.sum_locks_stuck_cnt %s' % (result))
        monitor.record_gauge(stat='rules.no_of_files.total.sum_locks_stuck_cnt', value=result)

        # check left replicating files
        query = (session.query(func.sum(models.ReplicationRule.locks_replicating_cnt))
                        .filter(models.ReplicationRule.state.in_([RuleState.STUCK, RuleState.REPLICATING])))
        result = query.one()[0] or 0

        print('rules.no_of_files.total.sum_locks_replicating_cnt %s' % (result))
        monitor.record_gauge(stat='rules.no_of_files.total.sum_locks_replicating_cnt', value=result)

        # check stuck and replicating files which are more than X old
        for aname, adelta in ages.items():
            timeLimit = datetime.datetime.utcnow() - adelta

            query = (session.query(func.sum(models.ReplicationRule.locks_stuck_cnt))
                            .filter(models.ReplicationRule.state == RuleState.STUCK)
                            .filter(models.ReplicationRule.created_at <= timeLimit))
            result = query.one()[0] or 0
            print('rules.no_of_files.stuck.%s.sum_locks_stuck_cnt %s' % (aname, result))
            monitor.record_gauge(stat='rules.no_of_files.stuck.%s.sum_locks_stuck_cnt' % aname, value=result)

            query = (session.query(func.sum(models.ReplicationRule.locks_replicating_cnt))
                            .filter(models.ReplicationRule.state.in_([RuleState.STUCK, RuleState.REPLICATING]))
                            .filter(models.ReplicationRule.created_at <= timeLimit))
            result = query.one()[0] or 0
            print('rules.no_of_files.replicating.%s.sum_locks_replicating_cnt %s' % (aname, result))
            monitor.record_gauge(stat='rules.no_of_files.replicating.%s.sum_locks_replicating_cnt' % aname,
                                 value=result)
    except:
        print(traceback.format_exc())
        sys.exit(UNKNOWN)
    finally:
        session.remove()
    sys.exit(OK)
