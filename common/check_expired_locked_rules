#!/usr/bin/env python
# Copyright European Organization for Nuclear Research (CERN) 2013
#
# Licensed under the Apache License, Version 2.0 (the "License");
# You may not use this file except in compliance with the License.
# You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0
#
# Authors:
# - Cedric Serfon, <cedric.serfon@cern.ch>, 2015
# - Donata Mielaikaite, <donata.mielaikaite@cern.ch>, 2020

'''
Probe to check the locked expired rules or datasets with locked rules
'''

import sys
from rucio.db.sqla.session import BASE,get_session
from rucio.core import monitor

# Exit statuses
OK, WARNING, CRITICAL, UNKNOWN = 0, 1, 2, 3

if BASE.metadata.schema:
    schema = BASE.metadata.schema + '.'
else:
    schema = ''

def main():
    '''
    Probe to check the locked expired rules or datasets with locked rules
    '''
    status = OK
    session = get_session()
    try:
        query = "select scope, rse_expression, count(*) from {schema}rules where locked=1 and expires_at<sys_extract_utc(localtimestamp) group by scope, rse_expression".format(schema=schema)
        print 'Locked expired rules'
        for row in session.execute(query):
            status = CRITICAL
            monitor.record_gauge(stat='judge.locked_expired_rules.%s.%s', %(row[0],row[1]) value=row[2])
    except Exception as error:
        print error
        status = UNKNOWN
        sys.exit(status)
    try:
        query = """select c.scope, c.rse_expression, count(*) from {schema}rules c,
                   (select a.scope, a.name from {schema}dids a
                   where a.expired_at is not null and a.expired_at < sys_extract_utc(localtimestamp)
                   and exists (select 1 from {schema}rules b where a.scope=b.scope and a.name=b.name and locked=1)) d
                   where c.scope=d.scope and c.name=d.name and locked=1 group by c.scope, c.rse_expression""".format(schema=schema)
        print 'Datasets expired with locked rules'
        for row in session.execute(query):
            status = CRITICAL
            monitor.record_gauge(stat='judge.datasets_with_locked_rules.%s', %(row[0],row[1]) value=row[2])
    except Exception as error:
        print error
        status = UNKNOWN
        sys.exit(status)
    sys.exit(status)


if __name__ == "__main__":
    main()

