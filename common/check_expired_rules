#!/usr/bin/env python3
# Copyright European Organization for Nuclear Research (CERN) 2013
#
# Licensed under the Apache License, Version 2.0 (the "License");
# You may not use this file except in compliance with the License.
# You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0
#
# Authors:
# - Vincent Garonne, <vincent.garonne@cern.ch>, 2013
# - Thomas Beermann, <thomas.beermann@cern.ch>, 2019
# - Eric Vaandering, <ewv@fnal.gov>, 2020-2021

"""
Probe to check the backlog of expired rules.
"""

import sys
import traceback

from prometheus_client import CollectorRegistry, Gauge, push_to_gateway
from probe_utils import get_prometheus_config
from rucio.core import monitor
from rucio.db.sqla.session import BASE, get_session

# Exit statuses
OK, WARNING, CRITICAL, UNKNOWN = 0, 1, 2, 3

if BASE.metadata.schema:
    schema = BASE.metadata.schema + '.'
else:
    schema = ''

PROM_SERVERS, PROM_PREFIX, PROM_LABELS = get_prometheus_config()

if __name__ == "__main__":
    try:
        registry = CollectorRegistry()
        session = get_session()
        expired_rules = 'select count(1) from {schema}rules where expires_at < sys_extract_utc(localtimestamp)'.format(schema=schema)
        result = session.execute(expired_rules).fetchone()[0]
        monitor.record_gauge('judge.expired_rules', value=result)
        Gauge(PROM_PREFIX + 'judge_expired_rules', '', registry=registry).set(result)
        lifetimed_rules = 'select count(1) from {schema}rules where expires_at > sys_extract_utc(localtimestamp)'.format(schema=schema)
        result = session.execute(lifetimed_rules).fetchone()[0]
        monitor.record_gauge('judge.lifetimed_rules', value=result)
        Gauge(PROM_PREFIX + 'judge_lifetimed_rules', '', registry=registry).set(result)

        if len(PROM_SERVERS):
            for server in PROM_SERVERS:
                try:
                    push_to_gateway(server.strip(), job='check_expired_rules', registry=registry,
                                    grouping_key=PROM_LABELS)
                except:
                    continue

        print(result)
    except:
        print(traceback.format_exc())
        sys.exit(UNKNOWN)
    sys.exit(OK)
